// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/carolineealdora/employee-hierarchy-app/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepository struct {
	mock.Mock
}

// FindEmployeeByIdOnArrayData provides a mock function with given fields: id, employees
func (_m *EmployeeRepository) FindEmployeeByIdOnArrayData(id int, employees []*entities.Employee) (*entities.Employee, error) {
	ret := _m.Called(id, employees)

	var r0 *entities.Employee
	if rf, ok := ret.Get(0).(func(int, []*entities.Employee) *entities.Employee); ok {
		r0 = rf(id, employees)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, []*entities.Employee) error); ok {
		r1 = rf(id, employees)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataSetEmployee provides a mock function with given fields:
func (_m *EmployeeRepository) GetDataSetEmployee() map[int]string {
	ret := _m.Called()

	var r0 map[int]string
	if rf, ok := ret.Get(0).(func() map[int]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]string)
		}
	}

	return r0
}

// PopulateEmployeeArrayData provides a mock function with given fields: filePath
func (_m *EmployeeRepository) PopulateEmployeeArrayData(filePath string) ([]*entities.Employee, error) {
	ret := _m.Called(filePath)

	var r0 []*entities.Employee
	if rf, ok := ret.Get(0).(func(string) []*entities.Employee); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEmployeeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmployeeRepository creates a new instance of EmployeeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmployeeRepository(t mockConstructorTestingTNewEmployeeRepository) *EmployeeRepository {
	mock := &EmployeeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
